package compilador;

import java_cup.runtime.*;
import ast.*;

action code {:
	private boolean modoDepuracion=false;
	private NodoBase ast=null;
	public int lineanum=0;
	
	//Debe ser llamada solo despues de un parse(), en caso contrario retornara null siempre;
	public NodoBase getASTroot(){
		return ast;
	}
:}

parser code {:
	public void	syntax_error(Symbol cur_token){
		System.err.println("[Error Sintatico]: Linea "+ cur_token.value );
	}
:}

/* Simbolos Terminales */

terminal IF;
terminal THEN;
terminal ELSE;
terminal END;
terminal REPEAT;
terminal UNTIL;
terminal READ;
terminal WRITE;
terminal String ID;
terminal Integer NUM;
terminal ASSIGN;
terminal EQ;
terminal LT;
terminal GT;
terminal LE;
terminal GE;
terminal NE;
terminal AND;
terminal OR;
terminal PLUS;
terminal MINUS;
terminal TIMES;
terminal OVER;
terminal LPAREN;
terminal RPAREN;
terminal SEMI;
terminal INT;
terminal BOOLEAN;
terminal COMMA;
terminal FOR;
terminal BEGIN;
terminal RETURN;
terminal VOID;
terminal boolean FALSE;
terminal boolean TRUE;
terminal BRALEFT;
terminal BRARIGHT;
terminal UMINUS;


/* Simbolos No Terminales */
non terminal program;
non terminal NodoBase stmt_seq;
non terminal NodoBase stmt;
non terminal NodoBase if_stmt;
non terminal NodoBase repeat_stmt;
non terminal NodoBase assign_stmt;
non terminal NodoBase read_stmt;
non terminal NodoBase write_stmt;
non terminal NodoBase exp;
non terminal NodoBase exp_and;
non terminal NodoBase exp_logica; 
non terminal NodoBase simple_exp;
non terminal NodoBase term;
non terminal NodoBase factor;
non terminal NodoBase var_list;
non terminal NodoBase int_stmt;
non terminal NodoBase boolean_stmt;
non terminal NodoBase sent_for_stmt;
non terminal NodoBase fuctions_stmt;
non terminal NodoBase type_f_stmt;
non terminal NodoBase args_stmt;
non terminal NodoBase dec_stmt;
non terminal NodoBase args_II_stmt;
non terminal NodoBase strut_stmt;
non terminal NodoBase array;
non terminal NodoBase decl_part;


/* Precedencia de operadores */
precedence left PLUS;
precedence left MINUS;
precedence left TIMES;
precedence left UMINUS;
precedence left OR;
precedence left AND;
/* REGLAS GRAMATICALES */
program ::= strut_stmt:s {: 
				ast = s;
			:}
		;

strut_stmt  ::= fuctions_stmt:fun BEGIN stmt_seq:main END	{: if(modoDepuracion) System.out.println("\t regla 0");
									
					RESULT= new NodoProgram(fun,main);										
					:}
					
					
		;		
fuctions_stmt  ::= type_f_stmt:funcion fuctions_stmt:funciones {:  if(modoDepuracion) System.out.println("\t regla 20");
						NodoBase hijoActual = funcion;
						if(hijoActual !=null){
							while(hijoActual.TieneHermano()){
								hijoActual = hijoActual.getHermanoDerecha();
							}
							hijoActual.setHermanoDerecha(funciones);
							RESULT=funcion;
						}else{
							RESULT=funciones;
						}
					:}

			| 	/* empty */
		;
		
type_f_stmt ::= BOOLEAN ID:nom LPAREN args_stmt:arg RPAREN BEGIN stmt_seq:set END {: if(modoDepuracion) System.out.println("\t regla 22a");
					RESULT= new NodoFuncion("Boolean",nom,arg,set);
					:}
			| 	BOOLEAN ID:nom LPAREN  RPAREN BEGIN stmt_seq:set END {: if(modoDepuracion) System.out.println("\t regla 22b");
					RESULT= new NodoFuncion("Boolean",nom,set);
					:}
			|   INT ID:nom LPAREN args_stmt:arg RPAREN BEGIN stmt_seq:set END {: if(modoDepuracion) System.out.println("\t regla 22a");
					RESULT= new NodoFuncion("Int",nom,arg,set);
					:}
			| 	INT ID:nom LPAREN  RPAREN BEGIN stmt_seq:set END {: if(modoDepuracion) System.out.println("\t regla 22b");
					RESULT= new NodoFuncion("Int",nom,set);
					:}
			|   VOID ID:nom LPAREN args_stmt:arg RPAREN BEGIN stmt_seq:set END {: if(modoDepuracion) System.out.println("\t regla 23a");
					RESULT= new NodoFuncion("Void",nom,arg,set);
					:}
			| 	VOID ID:nom LPAREN  RPAREN BEGIN stmt_seq:set END {: if(modoDepuracion) System.out.println("\t regla 23b");
					RESULT= new NodoFuncion("Void",nom,set);
					:}
;

args_stmt ::= dec_stmt:argu COMMA args_stmt:lista {: if(modoDepuracion) System.out.println("\t regla 24a");
					NodoBase hijoActual = argu;
						if(hijoActual !=null){
							while(hijoActual.TieneHermano()){
								hijoActual = hijoActual.getHermanoDerecha();
							}
							hijoActual.setHermanoDerecha(lista);
							RESULT=argu;
						}else{
							RESULT=lista;
						}
					:}
			|	dec_stmt:d{: if(modoDepuracion) System.out.println("\t regla 24b");
					RESULT = d;
					:}
		;

dec_stmt ::= INT ID:iden {: if(modoDepuracion) System.out.println("\t regla 25a");					
					NodoIdentificador x = new NodoIdentificador(iden);
					RESULT = new NodoDeclaracion("Int",(NodoBase)(x));
					:}
			| BOOLEAN ID:iden {: if(modoDepuracion) System.out.println("\t regla 25a");
					NodoIdentificador x = new NodoIdentificador(iden);
					RESULT = new NodoDeclaracion("Boolean",(NodoBase)(x));
					:}
		;  

args_II_stmt ::= simple_exp:ex COMMA args_II_stmt:argume {: if(modoDepuracion) System.out.println("\t regla 26a");
					NodoBase hijoActual = ex;
						if(hijoActual !=null){
							while(hijoActual.TieneHermano()){
								hijoActual = hijoActual.getHermanoDerecha();
							}
							hijoActual.setHermanoDerecha(argume);
							RESULT=ex;
						}else{
							RESULT=argume;
						}
					:}
			|	simple_exp:ex{: if(modoDepuracion) System.out.println("\t regla 26b");
					RESULT = ex;
					:}
		; 


stmt_seq    ::= stmt:sent SEMI stmt_seq:ini   {: if(modoDepuracion) System.out.println("\t regla 2a"); 
						NodoBase hijoActual = sent;
						if(hijoActual !=null){
							while(hijoActual.TieneHermano()){
								hijoActual = hijoActual.getHermanoDerecha();
							}
							hijoActual.setHermanoDerecha(ini);
							RESULT=sent;
						}else{
							RESULT=ini;
						}	
						:}

			| /* empty */
		;

stmt        ::= if_stmt:sif	{: if(modoDepuracion) System.out.println("\t regla 3a"); 
					RESULT=sif;
					:}
            | repeat_stmt:srep	{: if(modoDepuracion) System.out.println("\t regla 3b"); 
						RESULT=srep;
						:}
            | assign_stmt:sasi	{: if(modoDepuracion) System.out.println("\t regla 3c"); 
						RESULT=sasi;
						:}
            | read_stmt:slec	{: if(modoDepuracion) System.out.println("\t regla 3d"); 
					RESULT=slec;
					:}
            | write_stmt:sesc	{: if(modoDepuracion) System.out.println("\t regla 3e"); 
					RESULT=sesc;
					:}
			| int_stmt:sint 	{: if(modoDepuracion) System.out.println("\t regla 3f");
					RESULT=sint; 
					:}
			| boolean_stmt:sboolean	{: if(modoDepuracion) System.out.println("\t regla 3g");
					RESULT=sboolean; 
					:}	
			| sent_for_stmt:sfor {: RESULT = sfor; :}						
			|   ID:nom LPAREN RPAREN{: if(modoDepuracion) System.out.println("\t regla 3h");
					RESULT = new NodoCallFuncion (nom);
					:}
			|ID:nom LPAREN args_II_stmt:arg RPAREN{: if(modoDepuracion) System.out.println("\t regla 3i");
					RESULT = new NodoCallFuncion (nom,arg);
					:}		
            | RETURN exp:ex {:		if(modoDepuracion) System.out.println("\t regla 3j");
            		RESULT= new NodoReturn(ex);
            	:}
            | error				{: if(modoDepuracion) System.out.println("\t regla 3k"); 
				System.out.println("Ocurrio error en cup # 0004");
				RESULT=null;
				:}
            ;

if_stmt     ::= IF exp:ex THEN stmt_seq:pthen END	{: if(modoDepuracion) System.out.println("\t regla 4a"); 
		RESULT = new NodoIf(ex,pthen);
		:}
		| IF exp:ex THEN stmt_seq:pthen ELSE stmt_seq:pelse END	{: if(modoDepuracion) System.out.println("\t regla 4b"); 
		RESULT = new NodoIf(ex,pthen,pelse);		
		:}
		;

repeat_stmt ::= REPEAT stmt_seq:cuerpo UNTIL exp:prueba	{: if(modoDepuracion) System.out.println("\t regla 5"); 
							RESULT = new NodoRepeat(cuerpo,prueba);
							:}
		;

assign_stmt ::= ID:variable 	{: if(modoDepuracion) System.out.println("\t regla 6 parte del medio"); 
				/*lineanum=1000; //Pasar/Obtener la linea correcta por el Simbolo
				String nombre = variable.getName();*/
				:}
			ASSIGN exp:ex	{: if(modoDepuracion) System.out.println("\t regla 6 parte final");
					if(variable!=null)
					RESULT = new NodoAsignacion(variable.toString(),ex);
					else{
					RESULT = null;
					System.out.println("Ocurrio error en cup # 0001");
					}
					:}
			| array:vector ASSIGN exp:ex	{: 
				RESULT=new NodoAsignacion(vector,ex); 
			:}
		;

read_stmt   ::=  READ ID:variable	{: if(modoDepuracion) System.out.println("\t regla 7"); 
					System.out.println("Leyendo Variable");
					if(variable!=null)
					RESULT = new NodoLeer(variable.toString());
					else{
					RESULT = null;
					System.out.println("Ocurrio error en cup # 0002");
					}
					:}
				| READ array:vector  {:
				    if(vector!=null)
				    RESULT= new NodoLeer(vector);
				    else{
				    RESULT=null;
				    System.out.println("Ocurrio error en cup # 0003");
				    }
				 :}
		;

write_stmt  ::= WRITE exp:ex	{: if(modoDepuracion) System.out.println("\t regla 8"); 
					RESULT= new NodoEscribir(ex);
					:}
		;

exp         ::= exp:exI OR exp_and:exD {: if(modoDepuracion) System.out.println("\t regla 9a"); 
								RESULT = new NodoOperacion(exI,tipoOp.or,exD);
								:} 
		| exp_and:ex {: if(modoDepuracion) System.out.println("\t regla 9a"); 
								RESULT = ex;
								:} 
	    ;
exp_and ::= exp_and:exI AND exp_logica:exD {: if(modoDepuracion) System.out.println("\t regla 9a");
                                                               RESULT = new NodoOperacion(exI,tipoOp.and,exD);
                                                               :}
               | exp_logica:ex {: if(modoDepuracion) System.out.println("\t regla 9a");
                                                               RESULT = ex;
                                                               :}
           ;
exp_logica       ::= simple_exp:exI LT simple_exp:exD	{: if(modoDepuracion) System.out.println("\t regla 9a"); 
								RESULT = new NodoOperacion(exI,tipoOp.menor,exD);
								:} 
		| simple_exp:exI GT simple_exp:exD	{: if(modoDepuracion) System.out.println("\t regla 9d"); 
							RESULT = new NodoOperacion(exI,tipoOp.mayor,exD);
							:}
		| simple_exp:exI EQ simple_exp:exD	{: if(modoDepuracion) System.out.println("\t regla 9b"); 
							RESULT = new NodoOperacion(exI,tipoOp.igual,exD);
							:}
		| simple_exp:exI NE simple_exp:exD	{: if(modoDepuracion) System.out.println("\t regla 9c"); 
							RESULT = new NodoOperacion(exI,tipoOp.noigual,exD);
							:}
		| simple_exp:exI GE simple_exp:exD	{: if(modoDepuracion) System.out.println("\t regla 9e"); 
							RESULT = new NodoOperacion(exI,tipoOp.mayorigual,exD);
							:}	
		| simple_exp:exI LE simple_exp:exD	{: if(modoDepuracion) System.out.println("\t regla 9f"); 
							RESULT = new NodoOperacion(exI,tipoOp.menorigual,exD);
							:}						
		| simple_exp:ex	{: if(modoDepuracion) System.out.println("\t regla 9g"); 
					RESULT = ex;
					:}
		;	    

simple_exp  ::= simple_exp:exI PLUS term:exD	{: if(modoDepuracion) System.out.println("\t regla 10a"); 
							RESULT = new NodoOperacion(exI,tipoOp.mas,exD);
							:}
		| simple_exp:exI MINUS term:exD	{: if(modoDepuracion) System.out.println("\t regla 10b"); 
							RESULT = new NodoOperacion(exI,tipoOp.menos,exD);
							:}
		| term:ex	{: if(modoDepuracion) System.out.println("\t regla 10c"); 
				RESULT=ex;
				:}
		;

term        ::= term:exI TIMES factor:exD	{: if(modoDepuracion) System.out.println("\t regla 11a"); 
							RESULT = new NodoOperacion(exI,tipoOp.por,exD);
							:}
		| term:exI OVER factor:exD	{: if(modoDepuracion) System.out.println("\t regla 11b"); 
						RESULT = new NodoOperacion(exI,tipoOp.entre,exD);
						:}
		| factor:ex	{: if(modoDepuracion) System.out.println("\t regla 11c"); 
					RESULT=ex;
					:}
		;

factor      ::= LPAREN exp:ex RPAREN	{: if(modoDepuracion) System.out.println("\t regla 12a"); 
							RESULT = ex;
							:}
		| NUM:valor	{: if(modoDepuracion) System.out.println("\t regla 12b"); 
					if(valor!=null){
						RESULT= new NodoValor(valor);					
					}else{
						RESULT = null;
						System.out.println("Ocurrio error en cup # 0005");
					}
					System.out.println("ddddd"+valor);
					:}
		| ID:variable	{: if(modoDepuracion) System.out.println("\t regla 12c"); 
					if(variable!=null){
						System.out.println("Construyendo Nodo ID para Lexema: "+ variable.toString());
						RESULT= new NodoIdentificador(variable.toString());		
					}else{
						RESULT = null;
						System.out.println("Ocurrio error en cup # 0005");
					}
					:}

		| ID:variable BRALEFT exp:ex BRARIGHT  	{:
						if(modoDepuracion) System.out.println("\t regla 12d"); 
						RESULT=new NodoIdentificador(variable,ex,null);
		:}
		|MINUS LPAREN simple_exp:ex RPAREN	{: if(modoDepuracion) System.out.println("\t regla 12a"); 
							RESULT = ex;
							:} %prec UMINUS
		
		| MINUS:opm NUM:valor{:
			if(modoDepuracion) System.out.println("\t regla 27a"); 
					System.out.println("Devolvi nodo numero entero");
					if(valor!=null){
						RESULT= new NodoValor(0-valor);					
					}else{
						RESULT = null;
						System.out.println("Ocurrio error en cup # 0005");
					}
		:} %prec UMINUS
		| MINUS:opm ID:variable{:
				if(modoDepuracion) System.out.println("\t regla 27b");
		:}	%prec UMINUS
		|ID:nom LPAREN RPAREN{: if(modoDepuracion) System.out.println("\t regla 12d");
					RESULT = new NodoCallFuncion (nom);
					:}
		|ID:nom LPAREN args_II_stmt:arg RPAREN{: if(modoDepuracion) System.out.println("\t regla 12e");
					RESULT = new NodoCallFuncion (nom,arg);
					
					:}		
		|TRUE {:  RESULT= new NodoValor(1,1); :}
		|FALSE {: RESULT= new NodoValor(0,1); :}
		| error	{: if(modoDepuracion) System.out.println("\t regla 12f"); 
				System.out.println("Ocurrio error en cup # 0003");
				RESULT=null;
				:}
		;

		
int_stmt	::= INT var_list:variables_list  		{: if(modoDepuracion) System.out.println("\t regla 13");
					RESULT = new NodoDeclaracion("Int",variables_list); 
				:}	
		;

boolean_stmt::= BOOLEAN var_list:variables_list 	{: if(modoDepuracion) System.out.println("\t regla 14");
					RESULT = new NodoDeclaracion("Boolean",variables_list);
				:}
		;

var_list	::= decl_part:dpart COMMA var_list:variables 		{: if(modoDepuracion) System.out.println("\t regla 15a");
				System.out.println("Construyendo Nodo ID ");
				
				RESULT = new NodoIdentificador(dpart, variables);		
				
		:}
		| decl_part:dpart							{: if(modoDepuracion) System.out.println("\t regla 15c"); 
				RESULT= dpart;		
				
		:}
	;	


decl_part ::=	 ID:variable {: 
				RESULT = new NodoIdentificador(variable.toString()); 
		:} 		
		|  ID:variable BRALEFT NUM:valor BRARIGHT  	{: 
				RESULT = new NodoIdentificador(variable.toString(),valor);
		:}	
		;	
array::=ID:variable BRALEFT exp:ex BRARIGHT {:RESULT= new NodoIdentificador(variable.toString(),ex,null);
 :};

sent_for_stmt ::= FOR LPAREN assign_stmt:asig SEMI exp:ex SEMI assign_stmt:paso RPAREN stmt_seq:cuerpo END {: RESULT = new NodoFor(cuerpo,ex,asig,paso);
				:}
				| /* empty*/ ;

